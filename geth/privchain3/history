admin.nodeInfo
admin.nodeInfo.enode
miner.start()
miner.stop()
admin.nodeInfo.enode
admin.peers
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 2;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(100);
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 2;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(100);
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 3;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(100);
personal.listAccounts
admin.nodeInfo
count(100)
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 3;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(20)
function minedBlocks(lastn) {
  blocks = [];
  limit = eth.blockNumber - lastn
  for (i = eth.blockNumber; i >= limit; i--) {
     blocks.push({blockNumber: i, miner: eth.getBlock(i).miner})
  }
  return blocks
}
minedBlocks(20)
personal.listAccounts
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 3;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(50)
function minedBlocks(lastn) {
  blocks = [];
  limit = eth.blockNumber - lastn
  for (i = eth.blockNumber; i >= limit; i--) {
     blocks.push({blockNumber: i, miner: eth.getBlock(i).miner})
  }
  return blocks
}
minedBlocks(50)
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 3;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(50)
function minedBlocks(lastn) {
  blocks = [];
  limit = eth.blockNumber - lastn
  for (i = eth.blockNumber; i >= limit; i--) {
     blocks.push({blockNumber: i, miner: eth.getBlock(i).miner})
  }
  return blocks
}
minedBlocks(100);
function count(lastn) {
  limit = eth.blockNumber - lastn
  var counts = [];
  var numOfMiners = 3;
  for (i = eth.blockNumber; i >= limit; i--) {
     var found = false;
     for (j = 0; j < numOfMiners; j++) {
     if (counts[j] && eth.getBlock(i).miner === counts[j].miner) {
   counts[j].count ++;
   found = true;
     }
     }
     if (!found) {
counts.push({miner: eth.getBlock(i).miner, count: 1});
     }
  }
  return counts;
}
count(50)
count(100)
count(200)
count(50)
miner.start()
admin.peers
eexit